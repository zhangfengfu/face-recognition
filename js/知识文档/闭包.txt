
什么是闭包

"官方"的解释是：闭包是一个拥有许多变量和绑定了这些变量的环境的表达式（通常是一个函数），因而这些变量也是该表达式的一部分。

相信很少有人能直接看懂这句话，因为他描述的太学术。
其实这句话通俗的来说就是：JavaScript中所有的function都是一个闭包。
一般来说，嵌套的function所产生的闭包更为强大，也是大部分时候我们所谓的“闭包”。

简单的理解：闭包就是能够读取其他函数内部变量的函数。
由于在Javascript语言中，只有函数内部的子函数才能读取局部变量，
因此可以把闭包简单理解成“定义在一个函数内部的函数”。
所以，在本质上，闭包就是将函数内部和函数外部连接起来的一座桥梁。

闭包是Javascript语言的一个难点，也是它的特色，很多高级应用都要依靠闭包实现。闭包可以用在许多地方。它的最大用处有两个，一个是可以读取函数内部的变量，另一个就是让这些变量的值始终保持在内存中。由于闭包会使得函数中的变量都被保存在内存中，内存消耗很大，所以不能滥用闭包，否则会造成网页的性能问题，在IE中可能导致内存泄露。

如果你能理解下面代码的运行结果，应该就算理解闭包的运行机制了。
var name = "The Window";   
var object = {   
　　name : "My Object",   
　　getNameFunc : function(){   
　　　　return function(){   
　　　　　　return this.name;   
　　　　};
　　}
};
alert(object.getNameFunc()());  //The Window



var a = function(){
    var i = 0;
    return function(){
        ++i;
    } 
    // 这里i没有被回收，因为在闭包里面还需要用它
}()    // 注意这里有一个()。 执行函数i=0, 并且返回一个函数(该函数包含++i)
a();    // 执行函数(++i)，返回1
a();    // 执行函数(++i)，返回2

var b = function(){
    var i = 0;
    return ++i;
    // 函数执行完之后i就可能被回收了
}
b();    //执行函数i=0, ++i, 返回1
b();    //执行函数i=0, ++i, 返回1
全局的变量一直在VM里面保留的，全局没被回收是因为不知道什么时候还会用到它，所以不能回收。